imports
{
import CCO.SourcePos
import CCO.HM.Base
import CCO.SystemF.Base
}

-------------------------------------------------------------------------------
-- Syntax
-------------------------------------------------------------------------------


--SystemF:
--data Ty
--  | TyVar   a :: {TyVar}
--  | Arr     ty1 :: Ty  ty2 :: Ty
--  | Forall  a :: {TyVar}  ty1 :: Ty
--
--data Tm
--  | Var    x :: {Var}
--  | Lam    x :: {Var}  ty :: Ty  t1 :: Tm
--  | App    t1 :: Tm  t2 :: Tm
--  | TyLam  a :: {TyVar}  t1 :: Tm
--  | TyApp  t1 :: Tm  ty :: Ty
--
--HM:
--data Tm
--  | Tm  pos :: {SourcePos}  t :: Tm_
--
--data Tm_
--  | Var  x :: {Var}
--  | Lam  x :: {Var}  t1 :: Tm
--  | App  t1 :: Tm  t2 :: Tm
--  | Let  x :: {Var}  t1 :: Tm  t2 :: Tm

attr HMTm HMTm_
    syn algoW           :: {SFTm}
    inh typeEnvironment :: {TyEnv}
 
sem HMTm
    | HMTm lhs.algoW = @t.algoW

sem HMTm_
    | Var lhs.algoW = SFVar "s"
    | Lam lhs.algoW = SFVar "s"
    | App lhs.algoW = SFVar "s"
    | Let lhs.algoW = SFVar "s"



{
gen :: TyEnv -> Ty -> TyScheme
gen env tau = undefined

inst :: TyScheme -> Ty
inst = undefined
}

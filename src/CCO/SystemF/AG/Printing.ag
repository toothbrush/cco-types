imports
{
import CCO.Printing
}

-------------------------------------------------------------------------------
-- Pretty printing
-------------------------------------------------------------------------------

attr SFTy SFTm
  syn ppSL :: {Doc}  -- pretty printing (single-line mode)
  syn ppML :: {Doc}  -- pretty printing (multiline mode)

sem SFTy
  | SFTyVar  loc.ppSL = text @a
  | SFArr    loc.ppSL = ppInfixSL @lhs.prec ("->", 0) @ty1.ppSL @ty2.ppSL
  | SFForall loc.ppSL = ppBinderSL "forall " (text @a) @ty1.ppSL

  | SFTyVar  lhs.ppML = @loc.ppSL
  | SFArr    lhs.ppML = @loc.ppSL >^<
                        ppInfixML @lhs.prec ("->", 0) @ty1.ppML @ty2.ppML
  | SFForall lhs.ppML = @loc.ppSL >^<
                        ppBinderML "forall " (text @a) @ty1.ppML

sem SFTm
  | SFVar    loc.ppSL = text @x
  | SFLam    loc.ppSL = ppBinderSL "\\" (text @x >#< text ":" >#< @ty.ppSL)
                        @t1.ppSL
  | SFApp    loc.ppSL = ppInfixSL @lhs.prec ("", 10) @t1.ppSL @t2.ppSL
  | SFTyLam  loc.ppSL = ppBinderSL "/\\" (text @a) @t1.ppSL
  | SFTyApp  loc.ppSL = ppInfixSL @lhs.prec ("", 10) @t1.ppSL (brackets @ty.ppSL)

  | SFVar    lhs.ppML = @loc.ppSL
  | SFLam    lhs.ppML = @loc.ppSL >^<
                        ppBinderML "\\" (text @x >#< text ":" >#< @ty.ppML)
                        @t1.ppML
  | SFApp    lhs.ppML = @loc.ppSL >^<
                        ppInfixML @lhs.prec ("", 10) @t1.ppML @t2.ppML
  | SFTyLam  lhs.ppML = @loc.ppSL >^<
                        ppBinderML "/\\" (text @a) @t1.ppML
  | SFTyApp  lhs.ppML = @loc.ppSL >^<
                        ppInfixML @lhs.prec ("", 10) @t1.ppML
                        (lbracket >#< @ty.ppML >-< rbracket)

-------------------------------------------------------------------------------
-- Precedence levels
-------------------------------------------------------------------------------

{
-- | Type of precedence levels.
type Prec = Int
}

attr SFTy SFTm
  inh prec :: {Prec}

sem SFTy
  | SFArr    ty1.prec = 1
           ty2.prec = 0
  | SFForall ty1.prec = 0

sem SFTm
  | SFLam   ty.prec = 0
          t1.prec = 0
  | SFApp   t1.prec = 10
          t2.prec = 11
  | SFTyLam t1.prec = 0
  | SFTyApp t1.prec = 9
          ty.prec = 0

{
-- | Pretty prints in single-line mode, given the precedence level of its
-- immediate context, a term constructed from a binary operator of a specified
-- precedence level.
-- 
-- A term is enclosed in parentheses if the precedence level of its operator 
-- is less than the precedence level of the enclosing context.

ppInfixSL :: Prec -> (String, Prec) -> Doc -> Doc -> Doc
ppInfixSL ctx (op, prec) l r = modifier $ l >#< ppOp >#< r
  where
    modifier = if prec < ctx then parens else id
    ppOp     = text op

-- | Pretty prints in multiline mode, given the precedence level of its
-- immediate context, a term constructed from a binary operator of a specified
-- precedence level.
-- 
-- A term is enclosed in parentheses if the precedence level of its operator 
-- is less than the precedence level of the enclosing context.

ppInfixML :: Prec -> (String, Prec) -> Doc -> Doc -> Doc
ppInfixML ctx (op, prec) l r = modifier $ l >#< ppOp >-< r
  where
    modifier doc = if prec < ctx then (lparen >#< doc >-< rparen) else doc
    ppOp         = text op
}

-------------------------------------------------------------------------------
-- Binders
-------------------------------------------------------------------------------

{
-- | Pretty prints in single-line mode, a construct involving a binder.
ppBinderSL :: String -> Doc -> Doc -> Doc
ppBinderSL binder arg body = text binder >|< arg >|< period >#< body

-- | Pretty prints in multiline mode, a construct involving a binder.
ppBinderML :: String -> Doc -> Doc -> Doc
ppBinderML binder arg body = text binder >|< arg >|< period >-< indent 2 body
}
